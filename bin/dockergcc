#!/usr/bin/env ruby
require 'thor'

# Quick compile and run c file on remote linux server
class DockerLinux < Thor

  desc 'exec hello.c', 'dockergcc exec hello.c'
  def exec(file)
    obj = File.basename(file, '.c')
    commands = [
      "gcc -Wall #{file} -o #{obj}",
      "./#{obj}",
      "rm ./#{obj}"
    ]
    puts run_commands(commands, Dir.pwd)
  end

  desc 'asm hello.c', 'dockergcc asm hello.c'
  def asm(file)
    obj = File.basename(file, '.c')
    commands = [
      "gcc -Wall -O0 -S #{file} -o #{obj}.s",
      "cat ./#{obj}.s",
      "rm ./#{obj}.s"
    ]
    puts run_commands(commands, Dir.pwd)
  end

  desc 'elf hello.c', 'dockergcc elf hello.c --headers'
  def elf(file, options='--all')
    obj = File.basename(file, '.c')
    commands = [
        "gcc -Wall #{file} -o #{obj}",
        "readelf #{options} ./#{obj}",
        "rm ./#{obj}"
    ]
    puts run_commands(commands, Dir.pwd)
  end

  private

  def run_commands(commands, pwd)
    `docker run --rm -v #{pwd}:/codes -w /codes gcc:7.3 bash -c "#{commands.join(' && ')}"`
  end


end

DockerLinux.start(ARGV)